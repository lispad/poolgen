package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

type goFile struct {
	file *os.File
}

func (g goFile) WriteHeader(packageName string) error {
	_, err := fmt.Fprintf(g.file,
		"// Code generated by poolgen. DO NOT EDIT.\n\n"+
			"package %s\n",
		packageName,
	)
	return err
}

func NewGoFile(sourceName string, packageName string) (*goFile, error) {
	if ext := filepath.Ext(sourceName); ext != ".go" {
		return nil, fmt.Errorf("wrong file extension '%s': %s", ext, sourceName)
	}

	sourceDir, sourceFile := filepath.Split(sourceName)
	name := sourceDir + strings.TrimSuffix(sourceFile, ".go") + "_pool.go"

	result, err := os.Create(name)
	if err != nil {
		return nil, err
	}

	resultFile := &goFile{file: result}

	return resultFile, resultFile.WriteHeader(packageName)
}
